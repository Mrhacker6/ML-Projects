import pandas as pd 
import numpy as np 
import plotly.express as px 
import plotly.graph_objects as go 

data = pd.read_csv('dynamic_pricing.csv')
print(data.head())
print(data.describe())
print(data.columns)

fig = px.scatter(data, x='Expected_Ride_Duration',
                 y='Historical_Cost_of_Ride',
                 title="Expected Ride duration Vs Cost",
                trendline='ols')
fig.show()

fig = px.box(data, x='Vehicle_Type', 
             y='Historical_Cost_of_Ride',
             title='Historical Cost of Ride Distribution by Vehicle Type')
fig.show()
#Check the datatypes/errors/handing missing values and dropna them 

for col in data.columns:
    data[col] = pd.to_numeric(data[col],errors='coerce')
numeric_data = data.select_dtypes(include=[float,int])
numeric_data = numeric_data.dropna()
corr_matrix = numeric_data.corr()
data_encoded = pd.get_dummies(data ,drop_first=True)
corr_matrix = data_encoded.corr()

corr_matrix = data.corr()

fig = go.Figure(data=go.Heatmap (
    z = corr_matrix.values,
    x = corr_matrix.columns,
    y = corr_matrix.columns,
    colorscale = 'Viridis'
    ))

fig.update_layout(title = 'Correlation Matrix')
fig.show()


#Implementing the Dynamic pricing 

high_demand_percentile = 75
low_demand_percentile = 25

#Calculte the demand_multipier based upon high and low percentile demand

data['demand_multiplier'] = np.where(data['Number_of_Riders'] > np.percentile(data['Number_of_Riders'], high_demand_percentile),
                                     data['Number_of_Riders'] / np.percentile(data['Number_of_Riders'], high_demand_percentile),
                                     data['Number_of_Riders'] / np.percentile(data['Number_of_Riders'], low_demand_percentile))

high_supply_percentile = 75 
low_supply_percentile = 25 

#Calculte the supply_multipier based upon high and low percentile supply

data['supply_multiplier'] = np.where(data['Number_of_Drivers'] > np.percentile(data['Number_of_Drivers'],low_supply_percentile),
                            np.percentile(data['Number_of_Drivers'],high_supply_percentile) / data['Number_of_Drivers'],
                            np.percentile(data['Number_of_Drivers'],low_supply_percentile) / data['Number_of_Drivers'])

# Define price adjustment factors for high and low demand/supply

demand_threshold_high = 1.2   #Higher demand threshold 
demand_threshold_low =  0.8   #Lower demand threshold 
supply_threshold_high = 0.8   #Higher supply threshold
supply_threshold_low = 1.2    #lower supply threshold

# Calculate the Actual Prices (Adjusted_Ride_Cost)

data['adjusted_ride_Cost'] = data['Historical_Cost_of_Ride'] * (
                             np.maximum(data['demand_multiplier'], demand_threshold_low ) *
                             np.maximum(data['supply_multiplier'], supply_threshold_high)
)
                                                                               
#Calculate the profit percentages for each ride

data['profit_percentage'] = ((data['adjusted_ride_Cost']-data['Historical_Cost_of_Ride']) / data['Historical_Cost_of_Ride']) * 100

#Profitable Rides
profitable_rides = data[data['profit_percentage']> 0]
loss_rides = data[data['profit_percentage']< 0]
                             
profitable_count = len(profitable_rides)
loss_count = len(loss_rides)

labels = ['profitable_rides','loss_rides']
values = [profitable_count,loss_count] 

fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole =0.4)]) 
fig.update_layout(title='Profitable Rides (Dynamic pricing Vs Histrocial Cost pricing)')
fig.show()                           

# Training the Dataset 
from sklearn.preprocessing import StandardScaler

def data_preprocessing_pipeline(data):
    numeric_features = data.select_dtypes(include=[float,int]).columns
    Cateogrical_features = data.select_dtypes(include=[object]).columns
    data[numeric_features] = data[numeric_features].fillna(data[numeric_features].mean())
    for feature in numeric_features:
        Q1 = data[feature].quartile(0.25)
        Q3 = data[feature].quartile(0.75)
    QR = Q3-Q1
    lower_bound = Q1 - (1.5 * IQR)
    upper_bound = Q3 + (1.5 * IQR)
    
    data[feature] = np.where((data[feature] < lower_bound) | (data[feature] > upper_bound),data[feature].mean(),data[feature])
    data[Cateogrical_features] = data[Cateogrical_features].fillna(data[Cateogrical_features].mode().iloc(0))
    return data


data["Vehicle_Type"] = data['Vehicle_Type'].map({"Premium": 1, "Economy": 0})

#Split the data and train the data set using 
from sklearn.model_selection import train_test_split
x = np.array(data[["Number_of_Riders", "Number_of_Drivers", "Vehicle_Type", "Expected_Ride_Duration"]])
y = np.array(data[["adjusted_ride_cost"]])

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)

y_train = y_train.ravel()
y_test = y_test.ravel()

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(x_train,y_train)

def get_vehicle_type_numeric(Vehicle_Type):
    vehicle_type_mapping = {"Premiun":1,
                            "Economy":0}
    vehical_type_numeric = vehicle_type_mapping.get(Vehicle_Type)
    return get_vehicle_type_numeric

# Predicting using user input values
def predict_price(number_of_riders, number_of_drivers, Vehicle_Type, Expected_Ride_Duration):
    vehicle_type_numeric = get_vehicle_type_numeric(Vehicle_Type)
    if vehicle_type_numeric is None:
        raise ValueError("Invalid vehicle type")
    
    input_data = np.array([[number_of_riders, number_of_drivers, vehicle_type_numeric, Expected_Ride_Duration]])
    predict_price = model.predict(input_data)
    return predict_price

# Example prediction using user input values
user_number_of_riders = 50
user_number_of_drivers = 25
user_vehicle_type = "Economy"
Expected_Ride_Duration = 30
predicted_price = predict_price(user_number_of_riders, user_number_of_drivers, user_vehicle_type, Expected_Ride_Duration)
print("Predicted price:", predicted_price)
import plotly.graph_objects as go

# Predict on the test set
y_pred = model.predict(x_test)

# Create a scatter plot with actual vs predicted values
fig = go.Figure()

fig.add_trace(go.Scatter(
    x=y_test.flatten(),
    y=y_pred,
    mode='markers',
    name='Actual vs Predicted'
))

# Add a line representing the ideal case
fig.add_trace(go.Scatter(
    x=[min(y_test.flatten()), max(y_test.flatten())],
    y=[min(y_test.flatten()), max(y_test.flatten())],
    mode='lines',
    name='Ideal',
    line=dict(color='red', dash='dash')
))

fig.update_layout(
    title='Actual vs Predicted Values',
    xaxis_title='Actual Values',
    yaxis_title='Predicted Values',
    showlegend=True,
)

fig.show()